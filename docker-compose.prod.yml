# docker-compose.prod.yml
version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: wechat-editor-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: wechat_editor
      POSTGRES_USER: ${DB_USER:-wechat_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - wechat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-wechat_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: wechat-editor-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-your_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - wechat-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # 后端应用
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: wechat-editor-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${DB_USER:-wechat_user}:${DB_PASSWORD:-your_secure_password}@postgres:5432/wechat_editor
      REDIS_URL: redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_min_32_chars}
      JWT_EXPIRES_IN: 7d
      
      # AI 服务配置
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL:-https://api.openai.com/v1}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-3.5-turbo}
      
      # 文件存储配置
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      
      # 邮件服务配置
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      
      # 应用配置
      CORS_ORIGIN: ${CORS_ORIGIN:-https://yourdomain.com}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900000}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "3001:3001"
    networks:
      - wechat-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "
        npm run migrate &&
        npm run seed &&
        npm start
      "

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-https://api.yourdomain.com}
        VITE_APP_NAME: ${VITE_APP_NAME:-WeChat AI Editor}
        VITE_ENABLE_ANALYTICS: ${VITE_ENABLE_ANALYTICS:-true}
    container_name: wechat-editor-frontend
    restart: unless-stopped
    volumes:
      - frontend_dist:/usr/share/nginx/html
    networks:
      - wechat-network
    depends_on:
      - backend

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: wechat-editor-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/sites-available:/etc/nginx/sites-available
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - frontend_dist:/usr/share/nginx/html
      - ./backend/uploads:/usr/share/nginx/uploads
    networks:
      - wechat-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: wechat-editor-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - wechat-network
    profiles:
      - monitoring

  # Grafana 监控面板 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: wechat-editor-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - wechat-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # 自动备份服务 (可选)
  backup:
    image: prodrigestivill/postgres-backup-local
    container_name: wechat-editor-backup
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: wechat_editor
      POSTGRES_USER: ${DB_USER:-wechat_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password}
      POSTGRES_EXTRA_OPTS: "-Z9 --schema=public --blobs"
      SCHEDULE: "0 2 * * *"  # 每天凌晨2点备份
      BACKUP_KEEP_DAYS: 7
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 6
      HEALTHCHECK_PORT: 8080
    volumes:
      - ./backups:/backups
    networks:
      - wechat-network
    depends_on:
      - postgres
    profiles:
      - backup

# 网络配置
networks:
  wechat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  frontend_dist:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

---

# docker/Dockerfile.backend
FROM node:18-alpine AS builder

WORKDIR /app

# 复制 package.json 和 package-lock.json
COPY package*.json ./
COPY shared/package*.json ./shared/

# 安装依赖
RUN npm ci --only=production && npm cache clean --force

# 复制源代码
COPY . .

# 构建应用
RUN npm run build

# 生产环境镜像
FROM node:18-alpine AS production

WORKDIR /app

# 安装 dumb-init 用于信号处理
RUN apk add --no-cache dumb-init curl

# 创建非root用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# 复制构建结果和依赖
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./
COPY --from=builder --chown=nodejs:nodejs /app/prisma ./prisma

# 创建必要目录
RUN mkdir -p /app/uploads /app/logs && \
    chown -R nodejs:nodejs /app

USER nodejs

EXPOSE 3001

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3001/api/health || exit 1

ENTRYPOINT ["dumb-init", "--"]
CMD ["npm", "start"]

---

# docker/Dockerfile.frontend
FROM node:18-alpine AS builder

WORKDIR /app

# 安装依赖
COPY package*.json ./
RUN npm ci

# 复制源代码并构建
COPY . .
ARG VITE_API_BASE_URL
ARG VITE_APP_NAME
ARG VITE_ENABLE_ANALYTICS

ENV VITE_API_BASE_URL=$VITE_API_BASE_URL
ENV VITE_APP_NAME=$VITE_APP_NAME
ENV VITE_ENABLE_ANALYTICS=$VITE_ENABLE_ANALYTICS

RUN npm run build

# 生产环境 - Nginx
FROM nginx:alpine AS production

# 复制构建结果
COPY --from=builder /app/dist /usr/share/nginx/html

# 复制 Nginx 配置
COPY docker/nginx/default.conf /etc/nginx/conf.d/default.conf

# 创建日志目录
RUN mkdir -p /var/log/nginx && \
    touch /var/log/nginx/access.log /var/log/nginx/error.log

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost/ || exit 1

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]

---

# docker/nginx/nginx.conf
user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # 基本设置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 限流配置
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    # 上游服务器
    upstream backend {
        server backend:3001;
        keepalive 32;
    }

    # 主服务器配置
    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # 安全头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # 健康检查
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API 代理
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # 超时设置
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # 登录接口特殊限流
        location /api/auth/login {
            limit_req zone=login burst=5 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 静态资源缓存
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # 上传文件服务
        location /uploads/ {
            alias /usr/share/nginx/uploads/;
            expires 1y;
            add_header Cache-Control "public";
            access_log off;
        }

        # SPA 路由支持
        location / {
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "no-cache";
        }

        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS 配置 (如果使用 SSL)
    server {
        listen 443 ssl http2;
        server_name yourdomain.com;
        
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        
        # SSL 配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # HSTS
        add_header Strict-Transport-Security "max-age=31536000" always;
        
        # 重定向到 HTTPS 的配置会在这里...
        # 其他配置与 HTTP 相同
    }
}

---

# scripts/deploy.sh
#!/bin/bash

set -e

echo "🚀 开始部署 WeChat AI Editor..."

# 检查环境变量
if [ ! -f .env ]; then
    echo "❌ 请先创建 .env 文件"
    exit 1
fi

# 加载环境变量
source .env

# 检查必要的环境变量
required_vars=(
    "DB_PASSWORD"
    "REDIS_PASSWORD" 
    "JWT_SECRET"
    "OPENAI_API_KEY"
)

for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        echo "❌ 缺少必要的环境变量: $var"
        exit 1
    fi
done

echo "✅ 环境变量检查通过"

# 创建必要的目录
mkdir -p backups logs docker/ssl

# 构建镜像
echo "📦 构建 Docker 镜像..."
docker-compose -f docker-compose.prod.yml build --no-cache

# 停止旧容器
echo "🛑 停止旧容器..."
docker-compose -f docker-compose.prod.yml down

# 启动服务
echo "🚀 启动服务..."
docker-compose -f docker-compose.prod.yml up -d

# 等待服务启动
echo "⏳ 等待服务启动..."
sleep 30

# 检查服务状态
echo "🔍 检查服务状态..."
docker-compose -f docker-compose.prod.yml ps

# 运行数据库迁移
echo "🗃️ 运行数据库迁移..."
docker-compose -f docker-compose.prod.yml exec backend npm run migrate

# 健康检查
echo "🏥 执行健康检查..."
max_attempts=10
attempt=1

while [ $attempt -le $max_attempts ]; do
    if curl -f http://localhost/health > /dev/null 2>&1; then
        echo "✅ 健康检查通过"
        break
    else
        echo "⏳ 健康检查失败，重试中... ($attempt/$max_attempts)"
        sleep 10
        attempt=$((attempt + 1))
    fi
done

if [ $attempt -gt $max_attempts ]; then
    echo "❌ 健康检查失败，请检查日志"
    docker-compose -f docker-compose.prod.yml logs
    exit 1
fi

echo "🎉 部署完成！"
echo "📱 应用地址: http://localhost"
echo "📊 监控地址: http://localhost:3000 (如果启用了监控)"
echo "📈 Prometheus: http://localhost:9090 (如果启用了监控)"

# 显示有用的命令
echo ""
echo "📋 常用命令:"
echo "  查看日志: docker-compose -f docker-compose.prod.yml logs -f [service]"
echo "  重启服务: docker-compose -f docker-compose.prod.yml restart [service]"
echo "  进入容器: docker-compose -f docker-compose.prod.yml exec [service] sh"
echo "  停止服务: docker-compose -f docker-compose.prod.yml down"
echo "  更新代码: git pull && ./scripts/deploy.sh"

---

# scripts/backup.sh  
#!/bin/bash

set -e

# 配置
BACKUP_DIR="./backups"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="wechat_editor_backup_$DATE.sql"

# 创建备份目录
mkdir -p $BACKUP_DIR

echo "🗃️ 开始数据库备份..."

# 数据库备份
docker-compose -f docker-compose.prod.yml exec -T postgres pg_dump \
    -U ${DB_USER:-wechat_user} \
    -d wechat_editor \
    --clean --if-exists \
    --no-owner --no-privileges \
    > "$BACKUP_DIR/$BACKUP_FILE"

# 压缩备份文件
gzip "$BACKUP_DIR/$BACKUP_FILE"

echo "✅ 数据库备份完成: $BACKUP_DIR/$BACKUP_FILE.gz"

# 备份上传文件
echo "📁 备份上传文件..."
tar -czf "$BACKUP_DIR/uploads_backup_$DATE.tar.gz" -C ./backend uploads/

echo "✅ 文件备份完成: $BACKUP_DIR/uploads_backup_$DATE.tar.gz"

# 清理旧备份 (保留最近7天)
find $BACKUP_DIR -name "*.gz" -mtime +7 -delete

echo "🧹 清理旧备份完成"
echo "🎉 备份任务完成！"

---

# .env.example
# 数据库配置
DB_USER=wechat_user
DB_PASSWORD=your_secure_password_change_this

# Redis 配置
REDIS_PASSWORD=your_redis_password_change_this

# JWT 配置
JWT_SECRET=your_jwt_secret_key_min_32_chars_change_this
JWT_EXPIRES_IN=7d

# AI 服务配置
OPENAI_API_KEY=your_openai_api_key
OPENAI_BASE_URL=https://api.openai.com/v1
OPENAI_MODEL=gpt-3.5-turbo

# AWS S3 配置
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_S3_BUCKET=your_s3_bucket_name
AWS_REGION=us-east-1

# 邮件服务配置
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your_email@gmail.com
SMTP_PASS=your_app_password

# 应用配置
CORS_ORIGIN=https://yourdomain.com
VITE_API_BASE_URL=https://api.yourdomain.com
VITE_APP_NAME=WeChat AI Editor
VITE_ENABLE_ANALYTICS=true

# 监控配置 (可选)
GRAFANA_USER=admin
GRAFANA_PASSWORD=admin123

# 其他配置
MAX_FILE_SIZE=10485760
RATE_LIMIT_WINDOW=900000
RATE_LIMIT_MAX=100
